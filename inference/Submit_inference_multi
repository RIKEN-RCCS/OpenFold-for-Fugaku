#!/bin/bash
#
# Copyright 2023 RIKEN & Fujitsu Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

LANG=

#set -ex

echo "`date +%s.%N` #Submit at `date`"

if [ $# -ne 2 ] ; then
    cat << EOF >&2
usage: $0 nodeShape timeLimit
The timeLimit is the maximum of execution time with the format hh:mm:ss.

example: $0 12:00:00
EOF
    exit 1
fi


NodeShape="$1" && shift
TimeLimit="$1" && shift

. ../scripts/setenv

### Parameters
dnnlverbose=0

### The directory where data is stored
DataDir="$DATADIR"

echo DataDir is $DataDir

### Copy flag and directory path 
#   copy data from remote storage to local disk
#   and use the training data in local disk
LocalDataDir="/worktmp"

### WORKER script
WORKER="worker.sh"

### Python environment
ShareDir=/worktmp

case $NodeShape in
    *x*x*)
        NNodex=`echo "$NodeShape" | awk -F'x' '{print $1}'`
        NNodey=`echo "$NodeShape" | awk -F'x' '{print $2}'`
        NNodez=`echo "$NodeShape" | awk -F'x' '{print $3}'`
        NumNodes=$(( NNodex * NNodey * NNodez ))
	;;
    *)
        NumNodes=$NodeShape
        ;;
esac

# Select Resource Group
if  [ $NumNodes -lt 385 ] ; then
    RSC_GRP=small
elif  [ $NumNodes -lt 12288 ] ; then
    RSC_GRP=large
else
    RSC_GRP=huge
fi

### Create log directory
MyDir=`readlink -f "$0" | xargs dirname`
MyName=`basename "$0"`
Time=`date "+%y%m%d%H%M%S%3N"`
JobName="$MyName.$Time"

BaseFile="$MyDir/BatchBase"

LogDir="$MyDir/log"/`printf "%04d" $NumNodes`/"$JobName"
mkdir -p "$LogDir" || exit

###

cp "$MyDir/$0" $LogDir
cp ${MyDir}/${WORKER} ${LogDir}

ParameterFile="$LogDir/parameters"
cp "$MyDir/parameters_multi" "$ParameterFile"

git rev-parse HEAD 2>&1 > "$LogDir/git_hash"

### Generate qsub script
ScriptFile="$LogDir/script"

cat << EOF > "$ScriptFile"
#!/bin/bash
#PJM -L rscgrp=${RSC_GRP}
#PJM -L elapse=$TimeLimit
#PJM -L proc-core=48
#PJM -L "node=${NodeShape}"
##:strict,freq=2200
#PJM --rsc-list "retention_state=0"
#PJM -j
#PJM -S

hostname
export OpenFoldDir="$OPENFOLDDIR"
export Prefix="$PREFIX"

LogDir="$LogDir"
if [ ! -d "\$LogDir" ] ; then
    echo "\$LogDir: not a directory" >&2
    exit 1
fi

printenv > "$LogDir/environ"

### The directory where data is stored
DataDir="$DataDir"

dnnlverbose=$dnnlverbose
echo "DNNL Verbose Level: $dnnlverbose"

###
# Copy flag and directory path 
#   copy data from remote storage to local disk
#   and use the training data in local disk
LocalDataDir=${LocalDataDir}
TmpDataDir=${DataDir}
ShareDir=${ShareDir}

###
WORKER=${WORKER}

NumNodes=${NumNodes}

EOF

cat $BaseFile >> "$ScriptFile"

echo ---------------
echo Job information
echo ---------------
echo Mode: MPI
echo NumNodes: $NumNodes
echo NodeShape: $NodeShape
echo LogDir: $LogDir

if [[ `hostname` =~ fn01sv0[0-9] ]] ; then
    # To use LLIO (node-temporary)
    # QsubArgs+=("--llio localtmp-size=80Gi")

    # add group option
    QsubArgs+=("$PJSUB_OPT")

    QsubArgs+=("$ScriptFile")

    ### Execute qsub command
    echo "`date +%s.%N` #qsub"
    echo "> pjsub ${QsubArgs[@]} $@"
    pjsub ${QsubArgs[@]} "$@"

else
    # On compute node
    bash $ScriptFile 2>&1 | tee ${LogDir}/stdout.txt
fi
# End of file

