#!/bin/bash
#
# Copyright 2023 RIKEN & Fujitsu Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

LANG=

#set -ex

echo "`date +%s.%N` #Submit at `date`"

if [ $# -ne 4 ] && [ $# -ne 5 ] ; then
    cat << EOF >&2
usage: $0 NumNodes TimeLimit InputDir OutputDir [InputFileList]
TimeLimit     : the maximum of execution time with the format hh:mm:ss.
InputDir      : the directory contains input fasta files
OutputDir     : the directoy where alignment results will be stored
InputFileList : the file contains input fasta filename, one per line, and only that input is preprocessed. [optional]

example: $0 4 2:00:00 input_dir alinment_dir
EOF
    exit 1
fi

NumNodes="$1" && shift
TimeLimit="$1" && shift
InputDir="$1" && shift
OutputDir="$1" && shift
InputFileList="$1" && shift

. ../scripts/setenv

### The directory where data is stored
DataDir="$DATADIR"

echo DataDir is $DataDir

### WORKER script
WORKER="worker.sh"

# Select Resource Group
if  [ $NumNodes -eq 1 ] ; then
    RSC_GRP=small
elif  [ $NumNodes -lt 385 ] ; then
    RSC_GRP=small
elif  [ $NumNodes -lt 55297 ] ; then
    RSC_GRP=large
else
    RSC_GRP=huge
fi

### Create log directory
MyDir=`readlink -f "$0" | xargs dirname`
MyName=`basename "$0"`
Time=`date "+%y%m%d%H%M%S%3N"`
HostName=`hostname | awk -F . '{ print $1; }'`
JobName="$MyName.$Time"

LogDir="$MyDir/log"/"$JobName"
mkdir -p "$LogDir" || exit

###

cp "$MyDir/$0" $LogDir
cp ${MyDir}/${WORKER} ${LogDir}

git rev-parse HEAD 2>&1 > "$LogDir/git_hash"

### Generate qsub script
ScriptFile="$LogDir/script"

cat << EOF > "$ScriptFile"
#!/bin/bash
#PJM -L rscgrp=${RSC_GRP}
#PJM -L elapse=$TimeLimit
#PJM -L node=${NumNodes}
##:strict,freq=2200
#PJM --rsc-list "retention_state=0"
#PJM -j
#PJM -S

hostname
export BaseDir="$MyDir"

LogDir="$LogDir"
if [ ! -d "\$LogDir" ] ; then
    echo "\$LogDir: not a directory" >&2
    exit 1
fi

printenv > "$LogDir/environ"

### The directory where data is stored
DataDir="$DataDir"

###
WORKER=${WORKER}
NumNodes=$NumNodes
InputDir=$InputDir
OutputDir=$OutputDir
InputFileList=$InputFileList

source ../scripts/setenv


EOF

cat BatchBase >> "$ScriptFile"

echo ---------------
echo Job information
echo ---------------
echo NumNodes: $NumNodes
echo LogDir: $LogDir

if [[ `hostname` =~ fn01sv0[0-9] ]] ; then
    # To use LLIO (node-temporary)
    # QsubArgs+=("--llio localtmp-size=80Gi")

    # add group option
    QsubArgs+=("$PJSUB_OPT")

    QsubArgs+=("$ScriptFile")

    ### Execute qsub command
    echo "`date +%s.%N` #qsub"
    echo "> pjsub ${QsubArgs[@]} $@"
    pjsub ${QsubArgs[@]} "$@"

else
    # On compute node
    bash $ScriptFile 2>&1 | tee ${LogDir}/stdout.txt
fi
# End of file

